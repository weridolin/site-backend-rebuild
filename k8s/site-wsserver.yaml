apiVersion: apps/v1	#与k8s集群版本有关，使用 kubectl api-versions 即可查看当前集群支持的版本
kind: StatefulSet 	#该配置的类型，我们使用的是 Deployment
metadata:	        #译名为元数据，即 Deployment 的一些基本属性和信息
  name: site-wsserver-statefulset	#Deployment 的名称
  labels:	    #标签，可以灵活定位一个或多个资源，其中key和value均可自定义，可以定义多组，目前不需要理解
    app: site-wsserver #为该Deployment设置key为app，value为nginx的标签
spec:
  replicas: 1	#使用该Deployment创建两个应用程序实例
  selector:	    #标签选择器，与上面的标签共同作用，目前不需要理解
    matchLabels: #选择包含标签app:nginx的资源即为下面template的模板中包含 app:nginx的模板
      app: site-wsserver	
  template:
    metadata:	#Pod的元数据
      labels:	#Pod的标签，上面的selector即选择包含标签app:nginx的Pod
        app: site-wsserver	
    spec:	    #期望Pod实现的功能（即在pod中部署）
      containers:	#生成container，与docker中的container是同一种
      - name: site-wsserver		#container的名称
        image: python:3.9  #创建container，该container默认80端口可访问
        ports:
        - containerPort: 8001
          name: ws-server-port
        command: ["/bin/sh","-c"]
        args:
          - |
            cd ./ws_servers
            mkdir /root/.pip/
            cp pip.conf /root/.pip/pip.conf
            pip install -r requirements.txt  --default-timeout=1000
            python ./server.py
        volumeMounts:
          - name: wsserver-app
            mountPath: /app
        workingDir: /app
        envFrom:
          - configMapRef:
              name: site-config         
      volumes:
        - name: wsserver-app
          persistentVolumeClaim:
            claimName: pvc-wsserver-app-src-code
---
#### service
apiVersion: v1
kind: Service
metadata:
  name:  svc-site-wsserver
  labels:
    app: svc-site-wsserver
spec:
  selector:
    app: site-wsserver
  ports:
    - name: internal-wsserver-app
      port: 8001          # 服务访问端口
      targetPort: 8001       # 容器端口
      nodePort: 30011    # NodePort
  type: NodePort

--- 
### mount-django-app-src-code
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-wsserver-code
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: /site/site-backend-rebuild  # 源码目录 
    type: DirectoryOrCreate
  claimRef: # 确保其他 volume不会绑定到该 PV
    name: pvc-wsserver-app-src-code
    namespace: default
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-wsserver-app-src-code
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
  volumeName: pv-wsserver-code


--- 
### wss server ingress
apiVersion: networking.k8s.io/v1 
kind: Ingress
metadata:
  name: wsserver-ingress
  annotations:
    # nginx.ingress.kubernetes.io/rewrite-target: /usercenter/$1
    nginx.ingress.kubernetes.io/opentelemetry-operation-name: "wsserverCall"
    nginx.ingress.kubernetes.io/enable-opentelemetry: "true"
    nginx.ingress.kubernetes.io/opentelemetry-trust-incoming-span: "true"
    nginx.ingress.kubernetes.io/configuration-snippet: |
        auth_request /token/validate;
        auth_request_set $user_id $upstream_http_x_forwarded_user;
        proxy_set_header X-User $user_id;     
        set $dummy_val "$opentelemetry_context_traceparent";

spec:
  rules:
  - http:
      paths:
      - path: /ws-endpoint
        pathType: Prefix
        backend:
          service:
            name: svc-site-wsserver
            port:
              number: 8001
        
  ingressClassName: nginx 
  tls:
  - hosts:
    - weridolin.cn
    secretName: site-tls