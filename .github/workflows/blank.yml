# This is a basic workflow to help you get started with Actions

name: DEPLOY_CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    # tags:
    #   - "v*"
    branches: [ "master" ]
  # pull_request:
  #   branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  package_front:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ${{github.workspace}}/front

    strategy:
      matrix:
        node-version: [16.x]
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Set working directory and run commands
        run: |
          echo "Working in the specified directory"
          echo ${{github.workspace}}/front
          cd  ${{github.workspace}}/front
          ls -la

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          # cache: 'npm'
      
      - name: Install yarn  
        run: npm install -g yarn
      - name: install dependency
        run: |
          ls
          yarn install
      - name: build
        run: |
          yarn build
          ls ${{github.workspace}}/front/dist
          echo "${{ secrets.SSH_HOST }} ${{ secrets.SSH_USERNAME }} ${{ secrets.SSH_PASSWORD }}"

      - name: SSH Server Deploy
        uses: kostya-ten/ssh-server-deploy@v4
        with:
          host: ${{ secrets.SSH_HOST }}
          port: "22"
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          scp_source: ${{github.workspace}}/front/dist
          scp_target: /pythons/site-backend-rebuild/front
      

  update_old_backend:

    runs-on: ubuntu-latest

    steps:
      - name: Get Pull Request Info
        run: |
          echo ${{ github.event.head_commit.message }}
          echo ${{ github.event.head_commit.id }}
          echo ${{ github.event.head_commit.timestamp }}
          echo ${{ github.event.head_commit.author.name }}
          echo ${{ github.event.head_commit.url }}

          COMMIT_DATETIME=$(date -d @${{ github.event.head_commit.timestamp }})
          echo $COMMIT_DATETIME

      - name: Send Login Request
        run: |
          # 构建登录请求，这里使用示例的 curl 命令
          LOGIN_RESPONSE=$(curl -X POST -d "username=${{ secrets.SITE_ADMIN_USER }}&password=${{ secrets.SITE_ADMIN_USER_PWD }}" http://www.weridolin.cn/usercenter/api/v1/login)

          # 解析响应以获取令牌
          TOKEN=$(echo $LOGIN_RESPONSE | jq -r '.data.access_token')

          # # 存储令牌到 GitHub Actions Secrets
          # echo "::add-secret::token=$TOKEN"

          echo "get token $TOKEN"

      - name: Create A update log
        run: |
          # 构建更新请求，这里使用示例的 curl 命令
          # 注意：请替换为实际的请求信息和服务端地址
          BODY='{
            "repo_uri":"https://github.com/weridolin/site-backend-rebuild"
            "commit_content":$COMMIT_MESSAGE,
            "author":"更新日志作者",
            "is_finish":false,
            "commit_id":$COMMIT_SHA,
            "finish_time":$COMMIT_DATETIME
          }'
          RESPONSE=$(curl -X POST -H "Authorization: Bearer $TOKEN" -H "Content-Type: application/json" -d "$BODY" http://www.weridolin.cn/home/api/v1/updatelog)

          # 输出响应内容
          echo "Response: $RESPONSE"
